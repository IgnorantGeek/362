Jorgensen lists twelve guidelines to follow for making an expert estimation on the cost of a software project. While having all twelve is extremely specific, I think they can be grouped to be a little more concise. Evaluating estimation accuracy, finding estimation experts with relevant domain background, assessing the estimate’s uncertainty, using data from previous development tasks, and avoiding irrelevant/unreliable estimation information are the first to get grouped. They can all be summed up by saying make sure the estimate is accurate by getting your information on the estimate from relevant sources/experts. And to be completely honest, this makes sense. If you are looking at developing a piece of software, you should have experts weigh in on the situation. An expert from a similar piece of software would be extremely knowledgeable about the costs of making a piece of software because they got to make it already. Using data from previous software projects makes it easier to see similarities between your software project and theirs. Where their code costs them more money, it is most likely going to cost you more money. 
Asking the estimators to justify and criticize their estimates, estimating top-down and bottom-up independently of each other, combining estimates from different experts and estimation strategies, and providing feedback on the estimation accuracy and task relations can all be summed up by saying make sure to get multiple estimates taken in numerous ways. By checking from various directions, an estimation can gain depth. If an estimation does not have any depth, how can you know what path to take to spend the least amount of time and money on development? Differing opinions added in on top of this allows different experts to show you what they think would save you the most money. When you combine both the depth of the estimate and the differing opinions, you should have a path set out in front of you that is, on average, the cheapest to produce. As a business, this is the path that should be taken to maximize profit over time and allow the customer to receive their product in as little time as possible.
I think that providing estimation training opportunities and using estimation checklists kind of end up happening simultaneously. If you are training staff to estimate some software’s production cost, you will end up using some type of estimation checklist. When you train staff on how to estimate accurately, you will need to layout some techniques for them to use. Whether it’s calling on other experts to help or looking at similar projects costs, a pattern to be used as an impromptu checklist will be taught to the staff, regardless of original intentions.
The most important one, I feel, is avoiding conflicting estimation goals. An estimate should balance your software development’s profit margin and the consumer’s willingness to pay. Too much in either direction creates an unfair deal for the other party and risks losing the project to another company. Since this is a business, you want competitive pricing, but never so competitively priced that the project barely pulls a profit (if at all) if there are numerous delays.
While each of these may be important on their own, together is where they are strongest. Training your staff to give their estimates work great when you have multiple expert estimates and high accuracy. When all of these work together, a software development company should be confident to take on a project and make a profit, and a customer should be happy with their price.
